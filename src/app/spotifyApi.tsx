"use server"
import { Playlist } from "./page";

export interface SpotifyArtist {
  external_urls: { spotify: string };
  href: string;
  id: string;
  name: string;
  type: string;
  uri: string;
}

export interface SpotifyAlbumImage {
  url: string;
  height: number;
  width: number;
}

export interface SpotifyAlbum {
  album_type: string;
  total_tracks: number;
  available_markets: string[];
  external_urls: { spotify: string };
  href: string;
  id: string;
  images: SpotifyAlbumImage[];
  name: string;
  release_date: string;
  release_date_precision: string;
  restrictions?: { reason: string };
  type: string;
  uri: string;
  artists: SpotifyArtist[];
}

export interface SpotifyExternalIds {
  isrc: string;
  ean: string;
  upc: string;
}

export interface SpotifyTrack {
  album: SpotifyAlbum;
  artists: SpotifyArtist[];
  available_markets: string[];
  disc_number: number;
  duration_ms: number;
  explicit: boolean;
  external_ids: SpotifyExternalIds;
  external_urls: { spotify: string };
  href: string;
  id: string;
  is_playable: boolean;
  linked_from?: object;
  restrictions?: { reason: string };
  name: string;
  popularity: number;
  preview_url: string;
  track_number: number;
  type: string;
  uri: string;
  is_local: boolean;
}

export interface SpotifyTrackItem {
  added_at: string;
  track: SpotifyTrack;
}

export interface SpotifyTracksResponse {
  href: string;
  limit: number;
  next: string | null;
  offset: number;
  previous: string | null;
  total: number;
  items: SpotifyTrackItem[];
}

export interface SpotifySearchResponse {
  tracks: {
    href: string;
    limit: number;
    next: string | null;
    offset: number;
    previous: string | null;
    total: number;
    items: SpotifyTrack[]; 
  };
}

export interface filteredArtist {
  artistName:string;
  count: number;
  image: string;
  trackIDs: SpotifyTrackItem[];
}

export interface SpotifyUser {
  country: string;
  display_name: string;
  email: string;
  explicit_content: {
    filter_enabled: boolean;
    filter_locked: boolean;
  };
  external_urls: {
    spotify: string;
  };
  followers: {
    href: string | null;
    total: number;
  };
  href: string;
  id: string;
  images: {
    url: string;
    height: number;
    width: number;
  }[];
  product: string;
  type: string;
  uri: string;
}

export interface SpotifyPlaylist {
  collaborative: boolean;
  description: string;
  external_urls: { spotify: string };
  href: string;
  id: string;
  name: string;
  public: boolean;
  snapshot_id: string;
  type: string;
  uri: string;
}



export async function fetchLikedSongs(accessToken: string | undefined): Promise<SpotifyTrackItem[] | null> {
    const limit = 50;
    const firstRes = await fetch(`https://api.spotify.com/v1/me/tracks?limit=${limit}&offset=0`, {
        headers: {
            Authorization: `Bearer ${accessToken}`,
        },
    });
    if (!firstRes.ok) {
        const error = await firstRes.json();
        console.error("Spotify API error:", error);
        return null;
    }
    const firstData = await firstRes.json() as SpotifyTracksResponse;
    const allTracks: SpotifyTrackItem[] = [...firstData.items];

    const total = firstData.total;
    const numPages = Math.ceil(total / limit);

    const fetches: Promise<Response>[] = [];
    for (let i = 1; i < numPages; i++) {
        const offset = i * limit;
        fetches.push(fetch(`https://api.spotify.com/v1/me/tracks?limit=${limit}&offset=${offset}`, {
                headers: {
                    Authorization: `Bearer ${accessToken}`,
                },
            })
        );
    }

    const responses = await Promise.all(fetches);
    for (const res of responses) {
        if (!res.ok) {
            const error = await res.json();
            console.error("Spotify API error:", error);
            continue;
        }
        const data = await res.json() as SpotifyTracksResponse;
        allTracks.push(...data.items);
    }
    return allTracks;
}

async function createNewPlaylist(accessToken: string | undefined, playlistName: string) {
  const id = await getCurrentUserID(accessToken);
  const res = await fetch(`https://api.spotify.com/v1/users/${id}/playlists`, {
    method:"POST",
    headers: { Authorization: `Bearer ${accessToken}`,
               'Content-Type': 'application/json'},
    body: JSON.stringify({
      name: "Spotify Tools: " + playlistName,
      description: "Generated by SpotifyTools",
      public: false
    })
  })
  if(!res.ok) {
    const error = await res.json();
    console.error("Spotify API error (createNewPlaylist):", error);
    return null;
  }
  console.log("New playlist successfully created (createNewPlaylist):", playlistName)
  const data: SpotifyPlaylist = await(res).json();
  return data.id;
}

async function addToPlaylist(accessToken: string | undefined, songList: string[], playlistID: string | null) {
  const maxChunkSize = 100; 
  
  for (let i = 0; i < songList.length; i += maxChunkSize) {
    const chunk = songList.slice(i, i + maxChunkSize);
    
    const res = await fetch(`https://api.spotify.com/v1/playlists/${playlistID}/tracks`, {
      method: "POST",
      headers: { 
        Authorization: `Bearer ${accessToken}`, 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        uris: chunk
      })
    });
    
    if (!res.ok) {
      const error = await res.json();
      console.error("Spotify API error (addToPlaylist):", error);
      return null;
    }
  }
  
  console.log("All tracks added to playlist (addToPlaylist):", songList.length);
}

export async function multiplePlaylistCreation(accessToken: string | undefined, todoArray: Playlist[]) {
  for (let i=0; i<todoArray.length; i++) {
    const newPlaylistID = await createNewPlaylist(accessToken, todoArray[i].playlistName);
    const filteredArtists = todoArray[i].artists;
    const songURIList = filteredArtists.flatMap(artist => 
      artist.trackIDs.map(trackItem => trackItem.track.uri)
    )
    addToPlaylist(accessToken, songURIList, newPlaylistID)
  }
}



async function getCurrentUserID (accessToken: string | undefined) {
  const res = await fetch("https://api.spotify.com/v1/me", {
    method:"GET",
    headers: { Authorization: `Bearer ${accessToken}`},
  })

  if (!res.ok) {
    const error = await res.json();
    console.error("Spotify API error (getCurrentUserID):", error);
    return null;
  }

  const data: SpotifyUser = await(res).json();
  return data.id;

}


async function threeSongSearch(youtubeTitle: string, accessToken: string | undefined) {
  const res = await fetch(`https://api.spotify.com/v1/search?q=${youtubeTitle}&type=track&limit=3`, {
    method:"GET",
    headers: { Authorization: `Bearer ${accessToken}`},
  })

  if (!res.ok) {
    const error = await res.json();
    console.error("Spotify API error (getCurrentUserID):", error);
    return [];
  }
  const data: SpotifySearchResponse  = await res.json();
  const trackArray: SpotifyTrack[] = data.tracks.items;
  return trackArray;
  
}

export async function multiThreeSongSearch(youtubeTitles: string[], accessToken: string | undefined): Promise<SpotifyTrack[][]> {
  const promises = youtubeTitles.map(title => threeSongSearch(title, accessToken));
  const results = await Promise.all(promises);
  return results;
}